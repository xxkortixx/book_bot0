import asyncpg
from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboard.keyboards import main_menu, button_save_book, all_books, genre_selection_keyboard, all_genre_roman, all_genre_fairy, all_genre_story, all_books_del, keyboard_menu
from data.config import user, password, db_name, host

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã start
@router.message(CommandStart())
async def command_start(message: types.Message):
    conn = await asyncpg.connect(
        user=user,
        password=password,
        database=db_name,
        host=host
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS book_library(
            id SERIAL PRIMARY KEY,
            name TEXT,
            autor TEXT,
            info TEXT,
            genre TEXT
        )''')
    reply_menu = main_menu()
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞—é —Å–∫–æ–ª—å–∫–æ –≤–∞—Å —Ç–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–µ–ª–∞—é –≤–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.", reply_markup=reply_menu)


class BookInfo(StatesGroup):
    name = State()
    autor = State()
    info = State()
    genre = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É"
@router.callback_query(F.data == 'addbook')
async def add_book(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
    await state.set_state(BookInfo.name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–µ–π—Ç–æ–≤
@router.message(BookInfo.name)
async def state_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.lower())
    await message.answer("üìù–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏")
    await state.set_state(BookInfo.autor)

@router.message(BookInfo.autor)
async def state_autor(message: types.Message, state: FSMContext):
    await state.update_data(autor=message.text.lower())
    await message.answer("üìù–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
    await state.set_state(BookInfo.info)

@router.message(BookInfo.info)
async def state_info(message: types.Message, state: FSMContext):
    await state.update_data(info=message.text.lower())
    await message.answer("üìù–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ")
    await state.set_state(BookInfo.genre)

@router.message(BookInfo.genre)
async def state_genre(message: types.Message, state: FSMContext):
    await state.update_data(genre=message.text.lower())
    reply_keyboard = button_save_book()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=reply_keyboard)
    global data
    data = await state.get_data()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ –ë–î
@router.callback_query(F.data == "savebook")
async def save_book(callback: types.CallbackQuery):
    reply_keyboard = main_menu()
    conn = await asyncpg.connect(
        user=user,
        password=password,
        database=db_name,
        host=host
    )
    await conn.execute(
        '''INSERT INTO book_library(name, autor, info, genre) 
        VALUES($1, $2, $3, $4)''',
        data['name'], data['autor'], data['info'], data['genre']
    )
    await conn.close()
    await callback.message.edit_text("–ú–µ–Ω—é:", reply_markup=reply_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@router.callback_query(F.data == "searchbook")
async def search_button(callback: types.CallbackQuery):
    reply_keyboard = keyboard_menu()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ —á—Ç–æ –±—ã –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ö–æ—Ç—å –æ–¥–Ω—É –±—É–∫–≤—É –∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —ç—Ç—É –±—É–∫–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ —Ç–¥. \n –ö–æ–º–∞–Ω–¥–∞: /search", reply_markup=reply_keyboard)

#–≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–¥
@router.callback_query(F.data == "listbooks")
async def list_button(callback: types.CallbackQuery):
    reply_keyboard = await all_books()
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ - ", reply_markup=reply_keyboard)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
@router.callback_query(F.data.startswith("book:"))
async def info_book(callback: types.CallbackQuery):
    reply_keyboard = keyboard_menu()
    book_id = int(callback.data.split(":")[1])
    conn = await asyncpg.connect(
        user=user,
        password=password,
        database=db_name,
        host=host
    )
    for id, name, autor, genre in await conn.fetch('''SELECT id, name, autor, genre FROM book_libry WHERE id = $1''', book_id):
        await callback.message.edit_text(f"–ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏ - {id}\n –ù–∞–∑–≤–∞–Ω–∏–µ - {name}\n –ê–≤—Ç–æ—Ä - {autor}\n –ñ–∞–Ω—Ä - {genre}", reply_markup=reply_keyboard)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@router.callback_query(F.data == "genre_sort")
async def genre_filtr_button(callback: types.CallbackQuery):
    reply_keyboard = await genre_selection_keyboard()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –∂–∞–Ω—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=reply_keyboard)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
@router.callback_query(F.data.startswith("genre:"))
async def genre_list_button(callback: types.CallbackQuery):
    action = callback.data.split(":")[1]
    if action == "roman":
        reply_keyboard = await all_genre_roman()
        await callback.message.edit_text("–ö–Ω–∏–≥–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É -", reply_markup=reply_keyboard)
    if action == "fairy":
        reply_keyboard = await all_genre_fairy()
        await callback.message.edit_text("–ö–Ω–∏–≥–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É -", reply_markup=reply_keyboard)
    if action == "story":
        reply_keyboard = await all_genre_story()
        await callback.message.edit_text("–ö–Ω–∏–≥–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É -", reply_markup=reply_keyboard)

#–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ –±–¥ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
async def search_books(keyword):
    conn = await asyncpg.connect(
        user=user,
        password=password,
        database=db_name,
        host=host
    )
    books = await conn.fetch('''SELECT id, name, autor FROM book_libry WHERE name ILIKE $1 OR autor ILIKE $1''', f'%{keyword}%')
    await conn.close()
    return books

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
@router.message(Command('search'))
async def search_books_command(message: types.Message, command: CommandObject):
    keyword = command.args
    found_books = await search_books(keyword)
    
    if found_books:
        builder = InlineKeyboardBuilder()
        for book in found_books:
            builder.add(types.InlineKeyboardButton(text=f"{book['name']} - {book['autor']}", callback_data=f"book:{book['id']}"))
        
        await message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:", reply_markup=builder.as_markup())
    else:
        await message.answer("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞—é—Ç —Ä–æ–ª—å –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –º–µ–Ω—é
@router.callback_query(F.data.startswith("menu:"))
async def handlers_menu(callback: types.CallbackQuery):
    data = callback.data.split(":")[1]
    if data == "1":
        reply_keyboard = main_menu()
        await callback.message.edit_text("–ú–µ–Ω—é", reply_markup=reply_keyboard)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å
@router.callback_query(F.data == "delbook")
async def book_del_button(callback: types.CallbackQuery):
    reply_keyboard = await all_books_del()
    await callback.message.edit_text("–≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_keyboard)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
@router.callback_query(F.data.startswith("del:"))
async def books_del(callback: types.CallbackQuery):
    conn = await asyncpg.connect(
        user=user,
        password=password,
        database=db_name,
        host=host
    )
    data = int(callback.data.split(":")[1])
    reply_keyboard = keyboard_menu()
    await conn.execute("DELETE FROM book_libry WHERE id = $1", data)
    await callback.message.edit_text("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=reply_keyboard)
